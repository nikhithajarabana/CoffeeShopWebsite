{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { getAllitemsReducer, addItemReducer, getItemByIdReducer, editItemReducer } from \"./reducers/itemReducers\";\nimport { cartReducer } from \"./reducers/cartReducer\";\nimport { loginUserReducer, registerUserReducer, getAllUsersReducer } from \"./reducers/userReducer\";\nimport { placeOrderReducer, getUserOrdersReducer, getAllOrdersReducer, getAllDriversReducer } from \"./reducers/orderReducer\"; //register all the used reducers \n\nconst finalReducer = combineReducers({\n  getAllitemsReducer: getAllitemsReducer,\n  cartReducer: cartReducer,\n  registerUserReducer: registerUserReducer,\n  loginUserReducer: loginUserReducer,\n  placeOrderReducer: placeOrderReducer,\n  getUserOrdersReducer: getUserOrdersReducer,\n  addItemReducer: addItemReducer,\n  getItemByIdReducer: getItemByIdReducer,\n  editItemReducer: editItemReducer,\n  getAllOrdersReducer: getAllOrdersReducer,\n  getAllUsersReducer: getAllUsersReducer,\n  getAllDriversReducer: getAllDriversReducer\n});\nconst cartProducts = localStorage.getItem(\"cartProducts\") //if local storage has already stored products display them or send empty array\n? JSON.parse(localStorage.getItem(\"cartProducts\")) : [];\nconst currentUser = localStorage.getItem(\"currentUser\") //if local storage has current suer display user or send null \n? JSON.parse(localStorage.getItem(\"currentUser\")) : null;\nconst initialState = {\n  cartReducer: {\n    cartProducts: cartProducts\n  },\n  loginUserReducer: {\n    currentUser: currentUser\n  }\n};\nconst composeEnhancers = composeWithDevTools({});\nconst store = createStore(finalReducer, initialState, composeEnhancers(applyMiddleware(thunk)));\nexport default store;","map":{"version":3,"sources":["/Users/riteesh/Desktop/GitHub/FrontEnd_WebD_Project/INFO6150_WebDesign_FinalProject_Client-main/web_app/src/store.js"],"names":["combineReducers","createStore","applyMiddleware","thunk","composeWithDevTools","getAllitemsReducer","addItemReducer","getItemByIdReducer","editItemReducer","cartReducer","loginUserReducer","registerUserReducer","getAllUsersReducer","placeOrderReducer","getUserOrdersReducer","getAllOrdersReducer","getAllDriversReducer","finalReducer","cartProducts","localStorage","getItem","JSON","parse","currentUser","initialState","composeEnhancers","store"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,kBAAT,EAA4BC,cAA5B,EAA4CC,kBAA5C,EAAgEC,eAAhE,QAAuF,yBAAvF;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,EAAgDC,kBAAhD,QAA0E,wBAA1E;AACA,SAASC,iBAAT,EAA2BC,oBAA3B,EAAiDC,mBAAjD,EAAsEC,oBAAtE,QAAiG,yBAAjG,C,CAEA;;AACA,MAAMC,YAAY,GAAGjB,eAAe,CAAC;AACnCK,EAAAA,kBAAkB,EAAEA,kBADe;AAEnCI,EAAAA,WAAW,EAAEA,WAFsB;AAGnCE,EAAAA,mBAAmB,EAAGA,mBAHa;AAInCD,EAAAA,gBAAgB,EAAEA,gBAJiB;AAKnCG,EAAAA,iBAAiB,EAAEA,iBALgB;AAMnCC,EAAAA,oBAAoB,EAAGA,oBANY;AAOnCR,EAAAA,cAAc,EAAGA,cAPkB;AAQnCC,EAAAA,kBAAkB,EAAGA,kBARc;AASnCC,EAAAA,eAAe,EAAGA,eATiB;AAUnCO,EAAAA,mBAAmB,EAAEA,mBAVc;AAWnCH,EAAAA,kBAAkB,EAAEA,kBAXe;AAYnCI,EAAAA,oBAAoB,EAAGA;AAZY,CAAD,CAApC;AAcA,MAAME,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAsC;AAAtC,EACjBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAX,CADiB,GAEjB,EAFJ;AAIA,MAAMG,WAAW,GAAGJ,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAsC;AAAtC,EAClBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,CADkB,GACgC,IADpD;AAIA,MAAMI,YAAY,GAAG;AACnBf,EAAAA,WAAW,EAAE;AACXS,IAAAA,YAAY,EAAEA;AADH,GADM;AAInBR,EAAAA,gBAAgB,EAAG;AACjBa,IAAAA,WAAW,EAAGA;AADG;AAJA,CAArB;AAQA,MAAME,gBAAgB,GAAGrB,mBAAmB,CAAC,EAAD,CAA5C;AACA,MAAMsB,KAAK,GAAGzB,WAAW,CACvBgB,YADuB,EAEvBO,YAFuB,EAIvBC,gBAAgB,CAACvB,eAAe,CAACC,KAAD,CAAhB,CAJO,CAAzB;AAOA,eAAeuB,KAAf","sourcesContent":["import { combineReducers } from \"redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { getAllitemsReducer,addItemReducer, getItemByIdReducer, editItemReducer } from \"./reducers/itemReducers\";\nimport { cartReducer } from \"./reducers/cartReducer\";\nimport { loginUserReducer, registerUserReducer, getAllUsersReducer } from \"./reducers/userReducer\";\nimport { placeOrderReducer,getUserOrdersReducer, getAllOrdersReducer, getAllDriversReducer} from \"./reducers/orderReducer\";\n\n//register all the used reducers \nconst finalReducer = combineReducers({\n  getAllitemsReducer: getAllitemsReducer,\n  cartReducer: cartReducer,\n  registerUserReducer : registerUserReducer,\n  loginUserReducer: loginUserReducer,\n  placeOrderReducer: placeOrderReducer,\n  getUserOrdersReducer : getUserOrdersReducer,\n  addItemReducer : addItemReducer,\n  getItemByIdReducer : getItemByIdReducer,\n  editItemReducer : editItemReducer,\n  getAllOrdersReducer: getAllOrdersReducer,\n  getAllUsersReducer: getAllUsersReducer,\n  getAllDriversReducer : getAllDriversReducer\n});\nconst cartProducts = localStorage.getItem(\"cartProducts\")  //if local storage has already stored products display them or send empty array\n  ? JSON.parse(localStorage.getItem(\"cartProducts\"))\n  : [];\n\nconst currentUser = localStorage.getItem(\"currentUser\")   //if local storage has current suer display user or send null \n? JSON.parse(localStorage.getItem(\"currentUser\")) : null\n\n\nconst initialState = {\n  cartReducer: {\n    cartProducts: cartProducts,\n  },\n  loginUserReducer : {\n    currentUser : currentUser,\n  }\n};\nconst composeEnhancers = composeWithDevTools({});\nconst store = createStore(\n  finalReducer,\n  initialState,\n\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}