{"ast":null,"code":"import axios from \"axios\";\nexport const placeOrder = (token, subtotal) => async (dispatch, getState) => {\n  //check if user is logged in and place order \n  dispatch({\n    type: \"PLACE_ORDER_REQUEST\"\n  });\n  const currentUser = getState().loginUserReducer.currentUser;\n  const cartItems = getState().cartReducer.cartProducts;\n\n  try {\n    const response = await axios.post(\"/api/orders/placeorder\", {\n      token,\n      subtotal,\n      currentUser,\n      cartItems\n    });\n    dispatch({\n      type: \"PLACE_ORDER_SUCCESS\"\n    });\n    console.log(response);\n  } catch (error) {\n    dispatch({\n      type: \"PLACE_ORDER_FAILED\"\n    });\n    console.log(error);\n  }\n};\nexport const getUserOrders = () => async (dispatch, getState) => {\n  //if order placed dispaly success\n  const currentUser = getState().loginUserReducer.currentUser;\n  console.log(currentUser._id);\n  dispatch({\n    type: \"GET_USER_ORDERS_REQUEST\"\n  });\n\n  try {\n    const response = await axios.post(\"/api/orders/getuserOrders\", {\n      userid: currentUser._id\n    }); // fetching response by calling backend api \n\n    dispatch({\n      type: \"GET_USER_ORDERS_SUCCESS\",\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: \"GET_USER_ORDERS_FAILURE\",\n      payload: error\n    });\n  }\n};\nexport const getAllOrders = () => async (dispatch, getState) => {\n  //if order placed dispaly success\n  const currentUser = getState().loginUserReducer.currentUser;\n  dispatch({\n    type: \"GET_ALLORDERS_REQUEST\"\n  });\n\n  try {\n    const response = await axios.get(\"/api/orders/getallOrders\"); // fetching response by calling backend api \n\n    dispatch({\n      type: \"GET_ALLORDERS_SUCCESS\",\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: \"GET_ALLORDERS_FAILURE\",\n      payload: error\n    });\n  }\n};\nexport const deliverOrder = orderid => async dispatch => {\n  try {\n    const response = await axios.post('/api/orders/deliverorder', {\n      orderid\n    });\n    alert('order acceped and will be delivered');\n    const orders = await axios.get('/api/orders/getallorders');\n    dispatch({\n      type: 'GET_ALLORDERS_SUCCESS',\n      payload: orders.data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getAllDrivers = () => async dispatch => {\n  dispatch({\n    type: \"GET_ALLDRIVERS_REQUEST\"\n  });\n\n  try {\n    const response = await axios.get(\"/api/drivers/getallDrivers\"); // fetching response by calling backend api \n\n    dispatch({\n      type: \"GET_ALLDRIVERS_SUCCESS\",\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: \"GET_ALLDRIVERS_FAILURE\",\n      payload: error\n    });\n  }\n};\nexport const sendEmail = driver => async (dispatch, getState) => {\n  //if order placed dispaly success\n  const currentUser = getState().loginUserReducer.currentUser;\n  dispatch({\n    type: \"SEND_EMAIL_REQUEST\"\n  });\n\n  try {\n    const response = await axios.post(\"/api/orders/sendemail\", {\n      useremail: currentUser.email,\n      driver: driver\n    }); // fetching response by calling backend api \n\n    dispatch({\n      type: \"SEND_EMAIL_SUCCESS\",\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: \"SEND_EMAIL_FAILURE\",\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["/Users/riteesh/Desktop/GitHub/FrontEnd_WebD_Project/INFO6150_WebDesign_FinalProject_Client-main/web_app/src/actions/orderAction.js"],"names":["axios","placeOrder","token","subtotal","dispatch","getState","type","currentUser","loginUserReducer","cartItems","cartReducer","cartProducts","response","post","console","log","error","getUserOrders","_id","userid","payload","data","getAllOrders","get","deliverOrder","orderid","alert","orders","getAllDrivers","sendEmail","driver","useremail","email"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nexport const placeOrder = (token,subtotal) => async (dispatch,getState) => {    //check if user is logged in and place order \n  dispatch({ type: \"PLACE_ORDER_REQUEST\" });   \n  const currentUser = getState().loginUserReducer.currentUser\n  const cartItems = getState().cartReducer.cartProducts\n  try {\n    const response = await axios.post(\"/api/orders/placeorder\",{token,subtotal,currentUser,cartItems});\n    dispatch({ type: \"PLACE_ORDER_SUCCESS\"});\n    console.log(response);\n  } catch (error) {\n    dispatch({ type: \"PLACE_ORDER_FAILED\"});\n    console.log(error);\n  }\n};\n\nexport const getUserOrders = () => async (dispatch,getState) => {    //if order placed dispaly success\n    const currentUser = getState().loginUserReducer.currentUser\n    console.log(currentUser._id)\n    dispatch({ type: \"GET_USER_ORDERS_REQUEST\" });\n    try {\n      const response = await axios.post(\"/api/orders/getuserOrders\",{userid : currentUser._id});// fetching response by calling backend api \n      dispatch({ type: \"GET_USER_ORDERS_SUCCESS\", payload: response.data });\n    } catch (error) {\n      dispatch({ type: \"GET_USER_ORDERS_FAILURE\", payload: error });\n    }\n  };\n\n  export const getAllOrders = () => async (dispatch,getState) => {    //if order placed dispaly success\n    const currentUser = getState().loginUserReducer.currentUser\n    dispatch({ type: \"GET_ALLORDERS_REQUEST\" });\n    try {\n      const response = await axios.get(\"/api/orders/getallOrders\");// fetching response by calling backend api \n      dispatch({ type: \"GET_ALLORDERS_SUCCESS\", payload: response.data });\n    } catch (error) {\n      dispatch({ type: \"GET_ALLORDERS_FAILURE\", payload: error });\n    }\n  };\n\n\n  export const deliverOrder = (orderid) => async dispatch =>{\n\n    try{\n      const response = await axios.post('/api/orders/deliverorder', {orderid})\n      alert('order acceped and will be delivered')\n      const orders = await axios.get('/api/orders/getallorders')\n      dispatch({type: 'GET_ALLORDERS_SUCCESS', payload: orders.data})\n    }catch(error){\n        console.log(error);\n    }\n  }\n\n  export const getAllDrivers = () => async (dispatch) => {   \n    dispatch({ type: \"GET_ALLDRIVERS_REQUEST\" });\n    try {\n      const response = await axios.get(\"/api/drivers/getallDrivers\");// fetching response by calling backend api \n      dispatch({ type: \"GET_ALLDRIVERS_SUCCESS\", payload: response.data });\n    } catch (error) {\n      dispatch({ type: \"GET_ALLDRIVERS_FAILURE\", payload: error });\n    }\n  };\n\n  export const sendEmail = (driver) => async (dispatch,getState) => {    //if order placed dispaly success\n    const currentUser = getState().loginUserReducer.currentUser\n    dispatch({ type: \"SEND_EMAIL_REQUEST\" });\n    try {\n      const response = await axios.post(\"/api/orders/sendemail\",{useremail : currentUser.email,driver : driver});// fetching response by calling backend api \n      dispatch({ type: \"SEND_EMAIL_SUCCESS\", payload: response.data });\n    } catch (error) {\n      dispatch({ type: \"SEND_EMAIL_FAILURE\", payload: error });\n    }\n  };"]},"metadata":{},"sourceType":"module"}